/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.4).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package ru.tsystems.devschool.api;

import ru.tsystems.devschool.model.CourseDto;
import ru.tsystems.devschool.model.ErrorDto;
import ru.tsystems.devschool.model.MentorDto;
import ru.tsystems.devschool.model.SchoolDto;
import ru.tsystems.devschool.model.SearchStudentsDto;
import ru.tsystems.devschool.model.StudentDto;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2022-09-02T08:40:00.419+03:00")

@Api(value = "api", description = "the api API")
public interface ApiApi {

    ApiApiDelegate getDelegate();

    @ApiOperation(value = "Create a course", nickname = "createCourse", notes = "API for creating a new Course", response = CourseDto.class, tags={ "Course", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Successfully created", response = CourseDto.class),
        @ApiResponse(code = 400, message = "Bad request", response = ErrorDto.class),
        @ApiResponse(code = 500, message = "Internal server error", response = ErrorDto.class) })
    @RequestMapping(value = "/api/course",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<CourseDto> createCourse(@ApiParam(value = "CourseDto" ,required=true )  @Valid @RequestBody CourseDto courseDto) {
        return getDelegate().createCourse(courseDto);
    }


    @ApiOperation(value = "Create a Mentor", nickname = "createMentor", notes = "API for creating a new Mentor", response = MentorDto.class, tags={ "Mentor", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Successfully created", response = MentorDto.class),
        @ApiResponse(code = 400, message = "Bad request", response = ErrorDto.class),
        @ApiResponse(code = 500, message = "Internal server error", response = ErrorDto.class) })
    @RequestMapping(value = "/api/mentor",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<MentorDto> createMentor(@ApiParam(value = "MentorDto" ,required=true )  @Valid @RequestBody MentorDto mentorDto) {
        return getDelegate().createMentor(mentorDto);
    }


    @ApiOperation(value = "Create a School", nickname = "createSchool", notes = "API for creating a new School", response = SchoolDto.class, tags={ "School", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Successfully created", response = SchoolDto.class),
        @ApiResponse(code = 400, message = "Bad request", response = ErrorDto.class),
        @ApiResponse(code = 500, message = "Internal server error", response = ErrorDto.class) })
    @RequestMapping(value = "/api/school",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<SchoolDto> createSchool(@ApiParam(value = "SchoolDto" ,required=true )  @Valid @RequestBody SchoolDto schoolDto) {
        return getDelegate().createSchool(schoolDto);
    }


    @ApiOperation(value = "Create a Studen", nickname = "createStudent", notes = "API for creating a new Studen", response = StudentDto.class, tags={ "Student", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Successfully created", response = StudentDto.class),
        @ApiResponse(code = 400, message = "Bad request", response = ErrorDto.class),
        @ApiResponse(code = 409, message = "Conflict", response = ErrorDto.class),
        @ApiResponse(code = 500, message = "Internal server error", response = ErrorDto.class) })
    @RequestMapping(value = "/api/student",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<StudentDto> createStudent(@ApiParam(value = "StudentDto" ,required=true )  @Valid @RequestBody StudentDto studentDto) {
        return getDelegate().createStudent(studentDto);
    }


    @ApiOperation(value = "Gets list of courses", nickname = "getAllCourses", notes = "API for getting all courses", response = CourseDto.class, responseContainer = "List", tags={ "Course", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully get", response = CourseDto.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad request", response = ErrorDto.class),
        @ApiResponse(code = 500, message = "Internal server error", response = ErrorDto.class) })
    @RequestMapping(value = "/api/course/search",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<CourseDto>> getAllCourses() {
        return getDelegate().getAllCourses();
    }


    @ApiOperation(value = "Gets list of Mentors", nickname = "getAllMentors", notes = "API for getting all Mentors", response = MentorDto.class, responseContainer = "List", tags={ "Mentor", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully get", response = MentorDto.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad request", response = ErrorDto.class),
        @ApiResponse(code = 500, message = "Internal server error", response = ErrorDto.class) })
    @RequestMapping(value = "/api/mentor/search",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<MentorDto>> getAllMentors() {
        return getDelegate().getAllMentors();
    }


    @ApiOperation(value = "Gets list of Schools", nickname = "getAllSchools", notes = "API for getting all Schools", response = SchoolDto.class, responseContainer = "List", tags={ "School", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully get", response = SchoolDto.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad request", response = ErrorDto.class),
        @ApiResponse(code = 500, message = "Internal server error", response = ErrorDto.class) })
    @RequestMapping(value = "/api/school/search",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<SchoolDto>> getAllSchools() {
        return getDelegate().getAllSchools();
    }


    @ApiOperation(value = "Get course by id", nickname = "getCourse", notes = "API for getting course by id", response = CourseDto.class, tags={ "Course", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully found", response = CourseDto.class),
        @ApiResponse(code = 400, message = "Bad request", response = ErrorDto.class),
        @ApiResponse(code = 404, message = "Not found", response = ErrorDto.class),
        @ApiResponse(code = 500, message = "Internal server error", response = ErrorDto.class) })
    @RequestMapping(value = "/api/course/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<CourseDto> getCourse(@ApiParam(value = "",required=true) @PathVariable("id") Long id) {
        return getDelegate().getCourse(id);
    }


    @ApiOperation(value = "Get Mentor by id", nickname = "getMentor", notes = "API for getting Mentor by id", response = MentorDto.class, tags={ "Mentor", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully found", response = MentorDto.class),
        @ApiResponse(code = 400, message = "Bad request", response = ErrorDto.class),
        @ApiResponse(code = 404, message = "Not found", response = ErrorDto.class),
        @ApiResponse(code = 500, message = "Internal server error", response = ErrorDto.class) })
    @RequestMapping(value = "/api/mentor/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<MentorDto> getMentor(@ApiParam(value = "",required=true) @PathVariable("id") Long id) {
        return getDelegate().getMentor(id);
    }


    @ApiOperation(value = "Get School by id", nickname = "getSchool", notes = "API for getting School by id", response = SchoolDto.class, tags={ "School", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully found", response = SchoolDto.class),
        @ApiResponse(code = 400, message = "Bad request", response = ErrorDto.class),
        @ApiResponse(code = 404, message = "Not found", response = ErrorDto.class),
        @ApiResponse(code = 500, message = "Internal server error", response = ErrorDto.class) })
    @RequestMapping(value = "/api/school/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<SchoolDto> getSchool(@ApiParam(value = "",required=true) @PathVariable("id") Long id) {
        return getDelegate().getSchool(id);
    }


    @ApiOperation(value = "Get Student by id", nickname = "getStudent", notes = "API for getting Student by id", response = StudentDto.class, tags={ "Student", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully found", response = StudentDto.class),
        @ApiResponse(code = 400, message = "Bad request", response = ErrorDto.class),
        @ApiResponse(code = 404, message = "Not found", response = ErrorDto.class),
        @ApiResponse(code = 500, message = "Internal server error", response = ErrorDto.class) })
    @RequestMapping(value = "/api/student/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<StudentDto> getStudent(@ApiParam(value = "",required=true) @PathVariable("id") Long id) {
        return getDelegate().getStudent(id);
    }


    @ApiOperation(value = "Gets list of Students by criteria", nickname = "getStudentsByCriteria", notes = "API for searching Students by criteria", response = StudentDto.class, responseContainer = "List", tags={ "Student", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully get", response = StudentDto.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad request", response = ErrorDto.class),
        @ApiResponse(code = 500, message = "Internal server error", response = ErrorDto.class) })
    @RequestMapping(value = "/api/student/search",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<StudentDto>> getStudentsByCriteria(@ApiParam(value = "SearchStudentsDto" ,required=true )  @Valid @RequestBody SearchStudentsDto body) {
        return getDelegate().getStudentsByCriteria(body);
    }

}
